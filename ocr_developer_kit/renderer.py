"""Methods to examine the invoice png images generated"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_renderer.ipynb.

# %% auto 0
__all__ = ['render_single_page', 'render_with_custom_data', 'render_frame']

# %% ../nbs/02_renderer.ipynb 1
from .komatsu import *
from IPython.display import Image, display
from pathlib import Path
from manim import tempconfig
import os
import sys

# %% ../nbs/02_renderer.ipynb 4
def render_single_page(frame_number=0):
    """
    Render an invoice with a corresponding JSON object identified as `frame_number`
    and display the PNG inline in Jupyter.
    """
    scene = InvoiceScene(frame_number=frame_number)
    scene.render()
    print(f"‚úÖ Frame {frame_number} rendered successfully")

    # Default output path based on Manim convention
    media_dir = os.path.join(os.getcwd(), "media", "images")
    png_name = "InvoiceScene_ManimCE_v0.19.0.png"  # from the log output
    png_path = os.path.join(media_dir, png_name)

    if os.path.exists(png_path):
        display(Image(filename=png_path))
    else:
        print(f"‚ö†Ô∏è Could not find rendered PNG at {png_path}")

# %% ../nbs/02_renderer.ipynb 6
def render_with_custom_data(data_source, frame_number=0):
    """
    Render an invoice with a custom JSON data source identified as `frame_number`
    and display the PNG inline in Jupyter.
    """
    # load custom data
    invoice_data = load_json_data_source(
        data_source_path=data_source,
    )

    # Create scene with custom data
    scene = InvoiceSceneWithCustomData(frame_number=frame_number, custom_data=invoice_data)
    scene.render()
    print(f"‚úÖ Frame {frame_number} rendered successfully from custom data source")

    # Default output path based on Manim convention
    media_dir = os.path.join(os.getcwd(), "media", "images")
    png_name = "InvoiceSceneWithCustomData_ManimCE_v0.19.0.png"  # likely filename from Manim
    png_path = os.path.join(media_dir, png_name)

    if os.path.exists(png_path):
        display(Image(filename=png_path))
    else:
        print(f"‚ö†Ô∏è Could not find rendered PNG at {png_path}")
    

# %% ../nbs/02_renderer.ipynb 8
def render_frame():
    """
    Render a frame by providing the json object number and the path to the json file
    """
    print("üé® Basic File Picker")
    print("=" * 40)
    
    # Get file path
    file_path = input("Enter path to your JSON file: ")
    
    if not file_path:
        print("‚ùå No file path provided")
        return
    
    # Get frame number
    try:
        frame_input = input("Enter frame number (0, 1, 2...): ")
        frame_num = int(frame_input) if frame_input else 0
    except ValueError:
        frame_num = 0
        print("‚ö†Ô∏è Invalid frame number, using 0")
    
    print(f"üéØ Rendering frame {frame_num} from {file_path}")
    
    # Render
    try:
        render_with_custom_data(file_path, frame_num)
        print(f"‚úÖ Frame {frame_num} rendered successfully!")
    except Exception as e:
        print(f"‚ùå Error: {e}")


