"""Komatsu page 2"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_komatsu_page2.ipynb.

# %% auto 0
__all__ = ['ROW_X', 'ROW_Y_START', 'ROW_WIDTH', 'ROW_HEIGHT', 'SHIPMENT_NUMBER', 'PAGE_NUMBER', 'INVOICE_DATES', 'paint_pixels',
           'place_text_paint', 'make_line_paint', 'create_item_group', 'generate_header_specs_from_invoice',
           'InvoiceScene', 'load_json_data_source', 'InvoiceSceneWithCustomData']

# %% ../nbs/03_komatsu_page2.ipynb 2
from manim import *
import random
import numpy as np 
import os
import json

# %% ../nbs/03_komatsu_page2.ipynb 4
config.pixel_width = 2480
config.pixel_height = 3508
config.frame_width = 210
config.frame_height = 297
config.background_color = WHITE

# %% ../nbs/03_komatsu_page2.ipynb 6
ROW_X = 21
ROW_Y_START = 190
ROW_WIDTH = 753
ROW_HEIGHT = 117.5

SHIPMENT_NUMBER = ["5846327", "5846328", "5846329", "5846330", "5846331", "5846332"]
PAGE_NUMBER = [str(i) for i in range(1, 22)]
INVOICE_DATES = ["12-16-2024", "12-17-2024", "12-18-2024", "12-19-2024", "12-20-2024", "12-21-2024"]

# %% ../nbs/03_komatsu_page2.ipynb 9
def paint_pixels(px, axis='x', system='manim'):
    "provide the distance value in pixels , the axis (x or y)" 
    if axis == 'x':
        value = px * (210 / 812)
    elif axis == 'y':
        value = px * (297 / 1056)
    else:
        raise ValueError("axis must be 'x' or 'y'")
    if system == 'manim':
        return value
    elif system == 'topleft':
        if axis == 'x':
            return -210/2 + value
        elif axis == 'y':
            return 297/2 - value
    else:
        raise ValueError("system must be 'manim' or 'topleft'")

# %% ../nbs/03_komatsu_page2.ipynb 11
def place_text_paint(text, px, py, font_size=24, color=BLACK, weight=NORMAL, anchor=UL, line_spacing=1.2, **kwargs):
    x = paint_pixels(px, 'x', system='topleft')
    y = paint_pixels(py, 'y', system='topleft')
    txt = Text(text, font="calibri", font_size=font_size, color=color, weight=weight, line_spacing=line_spacing, **kwargs)
    txt.move_to([x, y, 0], anchor)
    return txt

# %% ../nbs/03_komatsu_page2.ipynb 13
def make_line_paint(start_px, end_px, color=BLACK, stroke_width=42, system='manim'):
    "provide the start point, end point and the axis(x or y ) that you want to draw the straight line in."
    start = np.array([
        paint_pixels(start_px[0], 'x', system='topleft'),
        paint_pixels(start_px[1], 'y', system='topleft'),
        0
    ])
    end = np.array([
        paint_pixels(end_px[0], 'x', system='topleft'),
        paint_pixels(end_px[1], 'y', system='topleft'),
        0
    ])
    return Line(start, end, color=color, stroke_width=stroke_width)

# %% ../nbs/03_komatsu_page2.ipynb 15
def create_item_group(item, item_number, row_x, row_y, row_width, row_height, draw_rect=False):
    col_x = {
        "item": 33,
        "part_number": 75,
        "description": 145,
        "country_of_origin": 412,
        "quantity": 551,
        "uom": 588,
        "unit_price": 686,
        "extended_price": 765,
    }
    y_text_px = row_y

    part_number = item.get("part_number", f"PN{random.randint(1000,9999)}")
    description = item.get("description", f"Desc {random.randint(100,999)}")
    country_of_origin = item.get("country_of_origin", random.choice(["USA", "CAN", "CHN", "JPN"]))
    quantity = item.get("quantity", random.randint(1, 100))
    uom = item.get("uom", random.choice(["PCS", "EA", "KG", "LB", "M", "FT"]))
    unit_price = item.get("unit_price", f"{random.uniform(10, 1000):.2f}")
    extended_price = item.get("extended_price", f"{random.uniform(100, 10000):.2f}")

    item_number_text = place_text_paint(str(item_number), col_x["item"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UL)
    part_number_text = place_text_paint(str(part_number), col_x["part_number"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UL)
    description_text = place_text_paint(str(description), col_x["description"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UL)
    country_text = place_text_paint(str(country_of_origin), col_x["country_of_origin"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UL)
    quantity_text = place_text_paint(str(quantity), col_x["quantity"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UR)
    uom_text = place_text_paint(str(uom), col_x["uom"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UL)
    unit_price_text = place_text_paint(str(unit_price), col_x["unit_price"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UR)
    extended_price_text = place_text_paint(str(extended_price), col_x["extended_price"], y_text_px, font_size=220, color=BLACK, weight=NORMAL, anchor=UR)

    group_items = [
        item_number_text, part_number_text, description_text, country_text,
        quantity_text, uom_text, unit_price_text, extended_price_text
    ]

    # --- Details block (US HTS and CA HTS on same line, LN below CA HTS) ---
    details_font_size = 220
    details_line_spacing = 13
    available_height = row_height
    max_lines = int(max(0, available_height // details_line_spacing))
    details_start_y = y_text_px + 27

    # Generate details lines
    if "details" in item:
        details_lines = item["details"].split("\n")
    else:
        us_hts = f"US HTS: {random.randint(8000000000, 9999999999)}"
        ca_hts = f"CA HTS: {random.randint(8000000000, 9999999999)}"
        ln = f"LN: {random.randint(1, 99)}"
        other_details = [
            f"DOC: {random.randint(8000000000, 9999999999)}",
            f"INVOICE: {random.randint(9000000000, 9999999999)}",
            "ECCN: EAR99",
            f"LICENSE DESIGNATION:  {random.choice(['NLR', 'LVS', 'TMP', 'GOV'])}",
            f"LICENSE EXPIRATION:     {random.randint(1, 12):02d}-{random.randint(1, 28):02d}-{random.randint(2025, 2030)}"
        ]
        details_lines = [us_hts, ca_hts, ln] + other_details

    # Place US HTS and CA HTS on the same line
    details_y = details_start_y
    us_hts_text = place_text_paint(details_lines[0], col_x["description"], details_y, font_size=details_font_size, color=BLACK, weight=NORMAL, anchor=UL)
    ca_hts_text = place_text_paint(details_lines[1], col_x["description"] + 115, details_y, font_size=details_font_size, color=BLACK, weight=NORMAL, anchor=UL)
    group_items.append(us_hts_text)
    group_items.append(ca_hts_text)

    # Place LN below CA HTS
    ln_y = details_start_y + details_line_spacing
    ln_text = place_text_paint(details_lines[2], col_x["description"] + 115, ln_y, font_size=details_font_size, color=BLACK, weight=NORMAL, anchor=UL)
    group_items.append(ln_text)

    # Place the rest of the details below US HTS
    for i, line in enumerate(details_lines[3:max_lines]):
        details_y = details_start_y + (i + 1) * details_line_spacing
        details_text = place_text_paint(
            line,
            col_x["description"],
            details_y,
            font_size=details_font_size,
            color=BLACK,
            weight=NORMAL,
            anchor=UL
        )
        group_items.append(details_text)

    # --- Quantity details block (under quantity value) ---
    quantity_details = [
        "Net:",
        f"{random.uniform(1, 10):.3f} LB",
        f"{random.uniform(1, 10):.3f} KG"
    ]
    quantity_details_font_size = 179.53
    quantity_details_line_spacing = 13
    quantity_details_start_y = y_text_px + 25
    # "Net:" left-aligned
    q_details_y = quantity_details_start_y
    net_text = place_text_paint(
        quantity_details[0],
        454,  # left edge
        q_details_y,
        font_size=quantity_details_font_size,
        color=BLACK,
        weight=NORMAL,
        anchor=UL
    )
    group_items.append(net_text)

    # LB and KG right-aligned
    for i, line in enumerate(quantity_details[1:]):
        q_details_y = quantity_details_start_y + (i + 1) * quantity_details_line_spacing
        value_text = place_text_paint(
            line,
            col_x["quantity"],  # right edge
            q_details_y,
            font_size=quantity_details_font_size,
            color=BLACK,
            weight=NORMAL,
            anchor=UR
        )
        group_items.append(value_text)

    if draw_rect:
        rect = Rectangle(
            width=paint_pixels(row_width, 'x'),
            height=paint_pixels(row_height, 'y')
        ).move_to([
            paint_pixels(row_x, 'x', 'topleft') + paint_pixels(row_width/2, 'x', 'manim'),
            paint_pixels(row_y, 'y', 'topleft') - paint_pixels(row_height/2, 'y', 'manim'),
            0
        ], UL).set_stroke(RED, 2)
        group_items.insert(0, rect)
    return VGroup(*group_items)


# %% ../nbs/03_komatsu_page2.ipynb 17
def generate_header_specs_from_invoice(invoice, frame_number=0):
    random.seed(frame_number)
    current_page = min(max(2, frame_number % (len(PAGE_NUMBER) - 1) + 1), len(PAGE_NUMBER) - 1)
    total_pages = min(current_page + 1, len(PAGE_NUMBER) - 1)
    return [
        place_text_paint(invoice["invoice_number"], 590, 88, font_size=210, color=BLACK, weight=NORMAL),
        place_text_paint(invoice["invoice_date"], 602, 122, font_size=210, color=BLACK, weight=NORMAL),
        place_text_paint(SHIPMENT_NUMBER[frame_number % len(SHIPMENT_NUMBER)], 212, 60, font_size=210, color=BLACK, weight=NORMAL),
        place_text_paint(f"PAGE   {PAGE_NUMBER[current_page]}  of   {PAGE_NUMBER[total_pages]}", 416, 60, font_size=250, color=BLACK, weight=NORMAL),
    ]


# %% ../nbs/03_komatsu_page2.ipynb 19
class InvoiceScene(Scene):
    def __init__(self, frame_number=0, **kwargs):  # Add frame_number parameter
        super().__init__(**kwargs)
        self.frame_number = frame_number  # Use the parameter directly

    def construct(self):
        # Outer A4 boundary
        frame = Rectangle(width=210, height=297).set_stroke(BLACK, 1)
        # Load items
        with open(os.path.join(os.path.dirname(__file__), "invoice_data.json")) as f:
            invoice_data = json.load(f)
        invoice = invoice_data[self.frame_number % len(invoice_data)] if invoice_data else {}
        items = invoice.get("items", [])
        random.seed(self.frame_number)  # Ensure per-frame randomization
        num_rows = len(items)
        table_bottom = ROW_Y_START + num_rows * ROW_HEIGHT
        # A Paint-sized rectangle at center (812x1056 pixels)
        container_main = Rectangle(
            width=paint_pixels(ROW_WIDTH, 'x'),
            height=paint_pixels(749, 'y')  # keep original height
        ).set_stroke(BLACK, 42)
        # Offset in A4 units
        offset_x = paint_pixels(21, 'x')
        offset_y = paint_pixels(29, 'y')
        frame_top_left = frame.get_corner(UL)
        # Create horizontal lines (unchanged)
        horizontal_lines = [
            make_line_paint([21, 139], [773, 139], system='topleft'),
            make_line_paint([21, 182], [773, 182], system='topleft'),
            make_line_paint([335, 57], [586, 57], system='topleft'),
            make_line_paint([335, 75], [585, 75], system='topleft'),
        ] + [
            make_line_paint([21, table_bottom], [773, table_bottom], system='topleft')
        ]
        # Create vertical lines: start y fixed, end y is table_bottom
        vertical_xs = [51, 142, 389, 449, 574, 624, 693]
        vertical_lines = [
            make_line_paint([335,29], [335, 139], system='topleft'),
            make_line_paint([586,29], [586, 139], system='topleft'),
        ] + [
            make_line_paint([x, 139], [x, table_bottom], system='topleft')
            for x in vertical_xs
        ]
        # Add text
        text_items = [
            place_text_paint("Commercial Invoice", 353, 33, font_size=500, color=BLACK, weight=BOLD),
            place_text_paint("INVOICE NUMBER", 590, 69, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("INVOICE DATE", 591, 106, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("SHIPMENT NO", 27, 60, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("ITEM", 25, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("PART NUMBER", 56, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("DESCRIPTION", 148, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("COUNTRY\nORIGIN", 394, 148, font_size=210, color=BLACK, weight=BOLD, line_spacing=1.65),
            place_text_paint("QUANTITY", 486, 165, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("UOM", 588, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("UNIT PRICE", 629, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("EXTENDED\nPRICE", 698, 152, font_size=210, color=BLACK, weight=BOLD, line_spacing=0.55),
        ]
        self.add(frame, container_main, *horizontal_lines, *vertical_lines, *text_items)
        container_main.move_to(
            frame_top_left + np.array([offset_x, -offset_y, 0]),
            UL
        )
        # Calculate container bottom in Paint pixel coordinates
        container_center = container_main.get_center()
        container_height = container_main.height
        container_bottom_y = container_center[1] - container_height / 2
        # Convert container_bottom_y to Paint pixel coordinates (topleft system)
        # We'll use the y value in the same system as row_y
        # Add header texts
        header_texts = generate_header_specs_from_invoice(invoice, frame_number=self.frame_number)
        self.add(*header_texts)
        # Add line items neatly stacked in rectangles, but stop if bottom would go below container
        row_x = ROW_X
        row_y = ROW_Y_START
        row_width = ROW_WIDTH
        row_height = ROW_HEIGHT
        item_groups = []
        start_item_number = random.randint(4, 26)
        for i, item in enumerate(items):
            # Compute the y position in Manim coordinates for the bottom of this row
            row_bottom_y = row_y + row_height
            # Convert row_bottom_y to Manim coordinates (topleft system)
            manim_row_bottom_y = paint_pixels(row_bottom_y, 'y', system='topleft')
            if manim_row_bottom_y < container_bottom_y:
                break
            item_number = start_item_number + i
            group = create_item_group(item, item_number, row_x, row_y, row_width, row_height, draw_rect=False)
            item_groups.append(group)
            row_y += row_height
        self.add(*item_groups)
        # Add Komatsu logo (top right of container_main)
        logo = ImageMobject(os.path.join(os.path.dirname(__file__), "assets", "komatsu_logo.png"))
        logo.scale_to_fit_height(paint_pixels(21, 'y'))  # Adjust as needed
        container_center = container_main.get_center()
        container_width = container_main.width
        container_top = container_center[1] + container_main.height / 2
        container_right = container_center[0] + container_width / 2
        logo_x = container_right - paint_pixels(35, 'x') - logo.width / 2
        logo_y = container_top - logo.height / 2 - paint_pixels(3, 'y')
        logo.move_to([logo_x, logo_y, 0])
        self.add(logo)
        # Add disclaimer image (bottom left of container_main)
        disclaimer = ImageMobject(os.path.join(os.path.dirname(__file__), "assets", "disclaimer.png"))
        disclaimer.scale_to_fit_width(paint_pixels(812, 'x'))  # Adjust as needed
        container_bottom = container_center[1] - container_main.height / 2
        disclaimer_x = container_center[0] + paint_pixels(5, 'x')
        disclaimer_y = container_bottom - disclaimer.height / 2 - paint_pixels(110, 'y')
        disclaimer.move_to([disclaimer_x, disclaimer_y, 0])
        self.add(disclaimer)

# %% ../nbs/03_komatsu_page2.ipynb 21
def load_json_data_source(data_source_path=None, data_source_url=None):
    """
    Load JSON data from various sources.
    
    Args:
        data_source_path (str, optional): Path to local JSON file
        data_source_url (str, optional): URL to remote JSON endpoint
    
    Returns:
        dict/list: Loaded JSON data
        
    Raises:
        FileNotFoundError: If local file doesn't exist
        requests.RequestException: If remote request fails
        json.JSONDecodeError: If JSON parsing fails
    """
    import json
    import os
    import requests
    
    # Try remote URL first if provided
    if data_source_url:
        try:
            response = requests.get(data_source_url, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error loading from URL {data_source_url}: {e}")
            raise
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON from URL {data_source_url}: {e}")
            raise
    
    # Try local path if provided
    if data_source_path:
        try:
            with open(data_source_path, 'r') as f:
                return json.load(f)
        except FileNotFoundError as e:
            print(f"No such file exists: {data_source_path}")
            raise
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON from file {data_source_path}: {e}")
            raise
    
    # If neither provided, raise error
    raise ValueError("Either data_source_path or data_source_url must be provided")

# %% ../nbs/03_komatsu_page2.ipynb 22
class InvoiceSceneWithCustomData(Scene):
    def __init__(self, frame_number=0, custom_data=None, **kwargs):
        super().__init__(**kwargs)
        self.frame_number = frame_number
        self.custom_data = custom_data

    def construct(self):
        # Outer A4 boundary
        frame = Rectangle(width=210, height=297).set_stroke(BLACK, 1)
        
        # Load items - use custom data if provided, otherwise fall back to default
        if self.custom_data is not None:
            invoice_data = self.custom_data
        else:
            with open(os.path.join(os.path.dirname(__file__), "invoice_data.json")) as f:
                invoice_data = json.load(f)
        
        invoice = invoice_data[self.frame_number % len(invoice_data)] if invoice_data else {}
        items = invoice.get("items", [])
        
        random.seed(self.frame_number)  # Ensure per-frame randomization
        num_rows = len(items)
        table_bottom = ROW_Y_START + num_rows * ROW_HEIGHT
        # A Paint-sized rectangle at center (812x1056 pixels)
        container_main = Rectangle(
            width=paint_pixels(ROW_WIDTH, 'x'),
            height=paint_pixels(749, 'y')  # keep original height
        ).set_stroke(BLACK, 42)
        # Offset in A4 units
        offset_x = paint_pixels(21, 'x')
        offset_y = paint_pixels(29, 'y')
        frame_top_left = frame.get_corner(UL)
        # Create horizontal lines (unchanged)
        horizontal_lines = [
            make_line_paint([21, 139], [773, 139], system='topleft'),
            make_line_paint([21, 182], [773, 182], system='topleft'),
            make_line_paint([335, 57], [586, 57], system='topleft'),
            make_line_paint([335, 75], [585, 75], system='topleft'),
        ] + [
            make_line_paint([21, table_bottom], [773, table_bottom], system='topleft')
        ]
        # Create vertical lines: start y fixed, end y is table_bottom
        vertical_xs = [51, 142, 389, 449, 574, 624, 693]
        vertical_lines = [
            make_line_paint([335,29], [335, 139], system='topleft'),
            make_line_paint([586,29], [586, 139], system='topleft'),
        ] + [
            make_line_paint([x, 139], [x, table_bottom], system='topleft')
            for x in vertical_xs
        ]
        # Add text
        text_items = [
            place_text_paint("Commercial Invoice", 353, 33, font_size=500, color=BLACK, weight=BOLD),
            place_text_paint("INVOICE NUMBER", 590, 69, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("INVOICE DATE", 591, 106, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("SHIPMENT NO", 27, 60, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("ITEM", 25, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("PART NUMBER", 56, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("DESCRIPTION", 148, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("COUNTRY\nORIGIN", 394, 148, font_size=210, color=BLACK, weight=BOLD, line_spacing=1.65),
            place_text_paint("QUANTITY", 486, 165, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("UOM", 588, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("UNIT PRICE", 629, 166, font_size=210, color=BLACK, weight=BOLD),
            place_text_paint("EXTENDED\nPRICE", 698, 152, font_size=210, color=BLACK, weight=BOLD, line_spacing=0.55),
        ]
        self.add(frame, container_main, *horizontal_lines, *vertical_lines, *text_items)
        container_main.move_to(
            frame_top_left + np.array([offset_x, -offset_y, 0]),
            UL
        )
        # Calculate container bottom in Paint pixel coordinates
        container_center = container_main.get_center()
        container_height = container_main.height
        container_bottom_y = container_center[1] - container_height / 2
        # Convert container_bottom_y to Paint pixel coordinates (topleft system)
        # We'll use the y value in the same system as row_y
        # Add header texts
        header_texts = generate_header_specs_from_invoice(invoice, frame_number=self.frame_number)
        self.add(*header_texts)
        # Add line items neatly stacked in rectangles, but stop if bottom would go below container
        row_x = ROW_X
        row_y = ROW_Y_START
        row_width = ROW_WIDTH
        row_height = ROW_HEIGHT
        item_groups = []
        start_item_number = random.randint(4, 26)
        for i, item in enumerate(items):
            # Compute the y position in Manim coordinates for the bottom of this row
            row_bottom_y = row_y + row_height
            # Convert row_bottom_y to Manim coordinates (topleft system)
            manim_row_bottom_y = paint_pixels(row_bottom_y, 'y', system='topleft')
            if manim_row_bottom_y < container_bottom_y:
                break
            item_number = start_item_number + i
            group = create_item_group(item, item_number, row_x, row_y, row_width, row_height, draw_rect=False)
            item_groups.append(group)
            row_y += row_height
        self.add(*item_groups)
        # Add Komatsu logo (top right of container_main)
        logo = ImageMobject(os.path.join(os.path.dirname(__file__), "assets", "komatsu_logo.png"))
        logo.scale_to_fit_height(paint_pixels(21, 'y'))  # Adjust as needed
        container_center = container_main.get_center()
        container_width = container_main.width
        container_top = container_center[1] + container_main.height / 2
        container_right = container_center[0] + container_width / 2
        logo_x = container_right - paint_pixels(35, 'x') - logo.width / 2
        logo_y = container_top - logo.height / 2 - paint_pixels(3, 'y')
        logo.move_to([logo_x, logo_y, 0])
        self.add(logo)
        # Add disclaimer image (bottom left of container_main)
        disclaimer = ImageMobject(os.path.join(os.path.dirname(__file__), "assets", "disclaimer.png"))
        disclaimer.scale_to_fit_width(paint_pixels(812, 'x'))  # Adjust as needed
        container_bottom = container_center[1] - container_main.height / 2
        disclaimer_x = container_center[0] + paint_pixels(5, 'x')
        disclaimer_y = container_bottom - disclaimer.height / 2 - paint_pixels(110, 'y')
        disclaimer.move_to([disclaimer_x, disclaimer_y, 0])
        self.add(disclaimer)
