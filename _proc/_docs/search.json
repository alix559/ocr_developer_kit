[
  {
    "objectID": "komatsu_page2.html",
    "href": "komatsu_page2.html",
    "title": "Layout Creation",
    "section": "",
    "text": "We define the configuration of the page layout as follows , in a way we are telling the pixel density of the page wit the following\nSome constants related to the creation of a page are as follows",
    "crumbs": [
      "Layout Creation"
    ]
  },
  {
    "objectID": "komatsu_page2.html#utility-functions",
    "href": "komatsu_page2.html#utility-functions",
    "title": "Layout Creation",
    "section": "Utility functions",
    "text": "Utility functions\nManim library accepts its coordinate values in a system that points its origin to the center of the page, we have to convert it to the top left orgin system, we use the following method for that purpose\n\nsource\n\npaint_pixels\n\n paint_pixels (px, axis='x', system='manim')\n\nprovide the distance value in pixels , the axis (x or y)\nSimilarly to place a text character or word in the top left coordinate system we have the following method\n\nsource\n\n\nplace_text_paint\n\n place_text_paint (text, px, py, font_size=24,\n                   color=ManimColor('#000000'), weight='NORMAL',\n                   anchor=array([-1.,  1.,  0.]), line_spacing=1.2,\n                   **kwargs)\n\nTo draw a straight line from a point a to b\n\nsource\n\n\nmake_line_paint\n\n make_line_paint (start_px, end_px, color=ManimColor('#000000'),\n                  stroke_width=42, system='manim')\n\nprovide the start point, end point and the axis(x or y ) that you want to draw the straight line in.\nThe following is a slightly complicated method used for generating the line items\n\nsource\n\n\ncreate_item_group\n\n create_item_group (item, item_number, row_x, row_y, row_width,\n                    row_height, draw_rect=False)\n\nThe invoice headers are generated using the following\n\nsource\n\n\ngenerate_header_specs_from_invoice\n\n generate_header_specs_from_invoice (invoice, frame_number=0)",
    "crumbs": [
      "Layout Creation"
    ]
  },
  {
    "objectID": "komatsu_page2.html#main-scene-class",
    "href": "komatsu_page2.html#main-scene-class",
    "title": "Layout Creation",
    "section": "Main Scene class",
    "text": "Main Scene class\n\nsource\n\nInvoiceScene\n\n InvoiceScene (frame_number=0, **kwargs)\n\n*A Scene is the canvas of your animation.\nThe primary role of :class:Scene is to provide the user with tools to manage mobjects and animations. Generally speaking, a manim script consists of a class that derives from :class:Scene whose :meth:Scene.construct method is overridden by the user’s code.\nMobjects are displayed on screen by calling :meth:Scene.add and removed from screen by calling :meth:Scene.remove. All mobjects currently on screen are kept in :attr:Scene.mobjects. Animations are played by calling :meth:Scene.play.\nA :class:Scene is rendered internally by calling :meth:Scene.render. This in turn calls :meth:Scene.setup, :meth:Scene.construct, and :meth:Scene.tear_down, in that order.\nIt is not recommended to override the __init__ method in user Scenes. For code that should be ran before a Scene is rendered, use :meth:Scene.setup instead.*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nframe_number\nint\n0\nAdd frame_number parameter\n\n\nkwargs\nVAR_KEYWORD",
    "crumbs": [
      "Layout Creation"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ocr_developer_kit",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "ocr_developer_kit"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "ocr_developer_kit",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall ocr_developer_kit in Development mode\n# make sure ocr_developer_kit package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to ocr_developer_kit\n$ nbdev_prepare",
    "crumbs": [
      "ocr_developer_kit"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "ocr_developer_kit",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/alix559/ocr_developer_kit.git\nor from conda\n$ conda install -c alix559 ocr_developer_kit\nor from pypi\n$ pip install ocr_developer_kit\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "ocr_developer_kit"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "ocr_developer_kit",
    "section": "How to use",
    "text": "How to use\n\nrender_single_page(2)\n\n[09/03/25 14:05:03] INFO                                                                   scene_file_writer.py:886\n                             File ready at                                                                         \n                             '/home/ajacob/mlprojects/ocr/ocr_developer_kit/nbs/media/imag                         \n                             es/InvoiceScene_ManimCE_v0.19.0.png'                                                  \n                                                                                                                   \n\n\n\n                    INFO     Rendered InvoiceScene                                                     scene.py:255\n                             Played 0 animations                                                                   \n\n\n\nFrame 2 rendered successfully\n\n\n\nrender_with_custom_data(\"/home/ajacob/mlprojects/ocr/ocr_developer_kit/ocr_developer_kit/invoice_data.json\", 1)\n\n[08/29/25 15:12:03] INFO                                                                   scene_file_writer.py:886\n                             File ready at                                                                         \n                             '/home/ajacob/mlprojects/ocr/ocr_developer_kit/nbs/media/imag                         \n                             es/InvoiceScene_ManimCE_v0.19.0.png'                                                  \n                                                                                                                   \n\n\n\n                    INFO     Rendered InvoiceSceneWithCustomData                                       scene.py:255\n                             Played 0 animations                                                                   \n\n\n\nFrame 1 rendered successfully from custom data source\n\n\n\nflatten_json_items(\"/home/ajacob/mlprojects/ocr/ocr_developer_kit/ocr_developer_kit/invoice_data_extended.json\", rows=18)\n\n\n\n\n\n\n\n\npart_number\ndescription\ncountry_of_origin\nquantity\nunit_price\nextended_price\ninvoice_number\ninvoice_date\nbuyer\n\n\n\n\n0\nP64028C\nMOTOR, ELECTRIC 230V 5HP\nCHN\n4.00\n697.65\n2790.60\n9941973384\n2024-12-25\nJOY GLOBAL CANADA\n\n\n1\nP20218Z\nMOTOR, ELECTRIC 230V 5HP\nCAN\n11.00\n421.45\n4635.95\n9941973384\n2024-12-25\nJOY GLOBAL CANADA\n\n\n2\nP29158F\nSOLENOID VALVE, 24VDC\nCHN\n8.00\n182.50\n1460.00\n9370039814\n2024-12-21\nJOY GLOBAL CANADA\n\n\n3\nP77621A\nGAUGE PRESSURE, 04 ORB MD-5000 PSI\nMEX\n20.00\n740.87\n14817.40\n9370039814\n2024-12-21\nJOY GLOBAL CANADA\n\n\n4\nP22910I\nTHERMOCOUPLE TYPE-K 1000°C\nGER\n2.00\n225.48\n450.96\n9362939532\n2024-12-13\nJOY GLOBAL CANADA\n\n\n5\nP85394V\nVALVE ASSEMBLY, RELIEF 3000 PSI\nGER\n18.00\n807.66\n14537.88\n9362939532\n2024-12-13\nJOY GLOBAL CANADA\n\n\n6\nP64029D\nMOTOR, ELECTRIC 230V 5HP\nCHN\n6.00\n720.00\n4320.00\n9941973385\n2024-12-26\nJOY GLOBAL CANADA\n\n\n7\nP29159G\nSOLENOID VALVE, 24VDC\nUSA\n12.00\n195.00\n2340.00\n9941973385\n2024-12-26\nJOY GLOBAL CANADA\n\n\n8\nP77622B\nGAUGE PRESSURE, 04 ORB MD-5000 PSI\nMEX\n15.00\n750.00\n11250.00\n9370039815\n2024-12-22\nJOY GLOBAL CANADA\n\n\n9\nP22911J\nTHERMOCOUPLE TYPE-K 1000°C\nGER\n8.00\n230.00\n1840.00\n9370039815\n2024-12-22\nJOY GLOBAL CANADA\n\n\n10\nP85395W\nVALVE ASSEMBLY, RELIEF 3000 PSI\nGER\n10.00\n820.00\n8200.00\n9362939533\n2024-12-14\nJOY GLOBAL CANADA\n\n\n11\nP64030E\nMOTOR, ELECTRIC 230V 5HP\nCHN\n3.00\n710.00\n2130.00\n9362939533\n2024-12-14\nJOY GLOBAL CANADA\n\n\n12\nP29160H\nSOLENOID VALVE, 24VDC\nUSA\n16.00\n185.00\n2960.00\n9941973386\n2024-12-27\nJOY GLOBAL CANADA\n\n\n13\nP77623C\nGAUGE PRESSURE, 04 ORB MD-5000 PSI\nMEX\n25.00\n745.00\n18625.00\n9941973386\n2024-12-27\nJOY GLOBAL CANADA\n\n\n14\nP22912K\nTHERMOCOUPLE TYPE-K 1000°C\nGER\n14.00\n235.00\n3290.00\n9370039816\n2024-12-23\nJOY GLOBAL CANADA\n\n\n15\nP85396X\nVALVE ASSEMBLY, RELIEF 3000 PSI\nGER\n22.00\n815.00\n17930.00\n9370039816\n2024-12-23\nJOY GLOBAL CANADA\n\n\n16\nP64031F\nMOTOR, ELECTRIC 230V 5HP\nCHN\n9.00\n705.00\n6345.00\n9362939534\n2024-12-15\nJOY GLOBAL CANADA\n\n\n17\nP29161I\nSOLENOID VALVE, 24VDC\nUSA\n7.00\n190.00\n1330.00\n9362939534\n2024-12-15\nJOY GLOBAL CANADA",
    "crumbs": [
      "ocr_developer_kit"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card - A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These are the suits\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1(note that there isnt a playing card at position 0, since we want the ranks to match the indices where possible\nranks[1]\n\n'A'",
    "crumbs": [
      "card - A basic playing card"
    ]
  },
  {
    "objectID": "card.html#comparision-operators",
    "href": "card.html#comparision-operators",
    "title": "card - A basic playing card",
    "section": "Comparision Operators",
    "text": "Comparision Operators\n\nEquality, less than, and greater than work on the rank and suit indices\n\n\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\n\ntest_eq(Card(suit=1,rank=2), Card(suit=1,rank=2))\ntest_ne(Card(suit=2,rank=3), Card(suit=1,rank=2))\ntest_ne(Card(suit=1,rank=2), Card(suit=1,rank=3))\n\n\n\n\nCard.__gt__\n\n Card.__gt__ (a:__main__.Card)\n\nReturn self&gt;value.\n\nassert  Card(suit=2, rank=2) &gt; Card(suit=1, rank=1)",
    "crumbs": [
      "card - A basic playing card"
    ]
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A♥️; 2♥️; 3♥️; 4♥️; 5♥️; 6♥️; 7♥️; 8♥️; 9♥️; 10♥️; J♥️; Q♥️; K♥️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\nThat should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nAs a reminder , these are the suits we defined for a card:\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\n\n\nWe can check if , say, the Ace of clubs is in the deck\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove , defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\nThere are 51 cards left in the deck now\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:ocr_developer_kit.card.Card)\n\nRemoves card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2,3)\ndeck.remove(card23)\n\nassert card23 not in deck",
    "crumbs": [
      "deck"
    ]
  },
  {
    "objectID": "01_renderer.html",
    "href": "01_renderer.html",
    "title": "ocr_developer_kit",
    "section": "",
    "text": "source\n\nmain\n\n main (frame_number=0)\n\n*Render an invoice with a corresponding json object identified as frame_number\nArgs: frame_number (int): The frame number to render (0, 1, or 2) Defaults to 0 if not specified*",
    "crumbs": [
      "01_renderer.html"
    ]
  },
  {
    "objectID": "renderer.html",
    "href": "renderer.html",
    "title": "Rendering",
    "section": "",
    "text": "We are generating invoice images by passing in the json data to the animation engine. It is a good practise to often test the json and image interplay to check if everything is working correctly, for example an invoice might be missing out some rows that were intended for a particular page because the animation engine was fed in a wrong height value.\n\nsource\n\n\n\n render_single_page (frame_number=0)\n\nRender an invoice with a corresponding JSON object identified as frame_number and display the PNG inline in Jupyter.\n\nThe above function can be used like render_single_page(1) , the value we provide the function is the json object that we wish to render.\nIf the dataset has 10 json objects to render the 1st object the command would be render_single_page(0) ( the indexing starts from 0,1,2 .. )\n\n\nsource\n\n\n\n\n render_with_custom_data (data_source, frame_number=0)\n\nRender an invoice with a custom JSON data source identified as frame_number and display the PNG inline in Jupyter.\nyou can use it like render_with_custom_data(“/home/ajacob/mlprojects/ocr/ocr_developer_kit/ocr_developer_kit/invoice_data.json”, 4)\nHere the first argument to the method is the path of the json data, and the send argument is the integer that represents which json object is being passed in from the json data.\n\nsource\n\n\n\n\n render_frame ()\n\nRender a frame by providing the json object number and the path to the json file\nrender_frame() can be used as it is , it is interactive in nature",
    "crumbs": [
      "Rendering"
    ]
  },
  {
    "objectID": "komatsu_page2.html#with-custom-data-path",
    "href": "komatsu_page2.html#with-custom-data-path",
    "title": "Layout Creation",
    "section": "with custom data path",
    "text": "with custom data path\n\nsource\n\nload_json_data_source\n\n load_json_data_source (data_source_path=None, data_source_url=None)\n\n*Load JSON data from various sources.\nArgs: data_source_path (str, optional): Path to local JSON file data_source_url (str, optional): URL to remote JSON endpoint\nReturns: dict/list: Loaded JSON data\nRaises: FileNotFoundError: If local file doesn’t exist requests.RequestException: If remote request fails json.JSONDecodeError: If JSON parsing fails*\n\nsource\n\n\nInvoiceSceneWithCustomData\n\n InvoiceSceneWithCustomData (frame_number=0, custom_data=None, **kwargs)\n\n*A Scene is the canvas of your animation.\nThe primary role of :class:Scene is to provide the user with tools to manage mobjects and animations. Generally speaking, a manim script consists of a class that derives from :class:Scene whose :meth:Scene.construct method is overridden by the user’s code.\nMobjects are displayed on screen by calling :meth:Scene.add and removed from screen by calling :meth:Scene.remove. All mobjects currently on screen are kept in :attr:Scene.mobjects. Animations are played by calling :meth:Scene.play.\nA :class:Scene is rendered internally by calling :meth:Scene.render. This in turn calls :meth:Scene.setup, :meth:Scene.construct, and :meth:Scene.tear_down, in that order.\nIt is not recommended to override the __init__ method in user Scenes. For code that should be ran before a Scene is rendered, use :meth:Scene.setup instead.*",
    "crumbs": [
      "Layout Creation"
    ]
  },
  {
    "objectID": "instruction_manual.html",
    "href": "instruction_manual.html",
    "title": "Getting Started",
    "section": "",
    "text": "click on the Terminal Icon on the top of the interface\nclick on new terminal option\ntype “pixi shell” in the terminal and press Enter",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "instruction_manual.html#step1-start-a-session-using-the-ocr_developer_kit",
    "href": "instruction_manual.html#step1-start-a-session-using-the-ocr_developer_kit",
    "title": "Getting Started",
    "section": "",
    "text": "click on the Terminal Icon on the top of the interface\nclick on new terminal option\ntype “pixi shell” in the terminal and press Enter",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "instruction_manual.html#step2-install-ocr_developer_kit-in-development-mode",
    "href": "instruction_manual.html#step2-install-ocr_developer_kit-in-development-mode",
    "title": "Getting Started",
    "section": "step2: Install ocr_developer_kit in development mode",
    "text": "step2: Install ocr_developer_kit in development mode\ntype “pip install -e .”",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "instruction_manual.html#step3-activate-the-lab-session",
    "href": "instruction_manual.html#step3-activate-the-lab-session",
    "title": "Getting Started",
    "section": "step3: Activate the lab session",
    "text": "step3: Activate the lab session\ntype “jupyter lab” and press enter",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "modeler.html",
    "href": "modeler.html",
    "title": "Modeler",
    "section": "",
    "text": "We will be using an AI tool to generate json required to render invoice images that will be fed into the training pipeline. There are multiple helper methods you can use for this :",
    "crumbs": [
      "Modeler"
    ]
  },
  {
    "objectID": "modeler.html#inspectors",
    "href": "modeler.html#inspectors",
    "title": "Modeler",
    "section": "Inspectors",
    "text": "Inspectors\nWe will be using the AI tool to impart different patterns i.e repeating line descriptions, multiple country of origins, same part numbers for different line descriptions . This is going to be an iterative process. The following are the methods that can be used to examine the json data we generate this way to feed into the model along with the invoice images for the training.\n\nsource\n\nflatten_json_items\n\n flatten_json_items (path, rows=50)\n\nLoad JSON and concatenate all ‘items’ lists into one DataFrame.",
    "crumbs": [
      "Modeler"
    ]
  },
  {
    "objectID": "renderer.html#single-page-render",
    "href": "renderer.html#single-page-render",
    "title": "Rendering",
    "section": "",
    "text": "We are generating invoice images by passing in the json data to the animation engine. It is a good practise to often test the json and image interplay to check if everything is working correctly, for example an invoice might be missing out some rows that were intended for a particular page because the animation engine was fed in a wrong height value.\n\nsource\n\n\n\n render_single_page (frame_number=0)\n\nRender an invoice with a corresponding JSON object identified as frame_number and display the PNG inline in Jupyter.\n\nThe above function can be used like render_single_page(1) , the value we provide the function is the json object that we wish to render.\nIf the dataset has 10 json objects to render the 1st object the command would be render_single_page(0) ( the indexing starts from 0,1,2 .. )\n\n\nsource\n\n\n\n\n render_with_custom_data (data_source, frame_number=0)\n\nRender an invoice with a custom JSON data source identified as frame_number and display the PNG inline in Jupyter.\nyou can use it like render_with_custom_data(“/home/ajacob/mlprojects/ocr/ocr_developer_kit/ocr_developer_kit/invoice_data.json”, 4)\nHere the first argument to the method is the path of the json data, and the send argument is the integer that represents which json object is being passed in from the json data.\n\nsource\n\n\n\n\n render_frame ()\n\nRender a frame by providing the json object number and the path to the json file\nrender_frame() can be used as it is , it is interactive in nature",
    "crumbs": [
      "Rendering"
    ]
  }
]